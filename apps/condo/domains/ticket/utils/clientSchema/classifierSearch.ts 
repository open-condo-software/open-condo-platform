import { ITicketClassifierRuleUIState, ITicketClassifierRuleWhereInput } from './TicketClassifierRule'
import { TicketClassifierRule as TicketClassifierRuleGQL } from '@condo/domains/ticket/gql'
import { ApolloClient } from '@core/next/apollo'
import { sortBy, uniqBy, isEmpty } from 'lodash'

type Options = {
    id: string
    name: string
}

interface IClassifiersSearch {
    init: () => Promise<void>
    fetchRules: (query: ITicketClassifierRuleWhereInput) => Promise<ITicketClassifierRuleUIState>
    places: (rules: ITicketClassifierRuleUIState) => Options[]
    categories: (rules: ITicketClassifierRuleUIState) => Options[]
    descriptions: (rules: ITicketClassifierRuleUIState) => Options[]
}


async function loadClassifierRules (client: ApolloClient, variables: ITicketClassifierRuleWhereInput): Promise<ITicketClassifierRuleUIState[]> {
    const data = await client.query({
        query: TicketClassifierRuleGQL.GET_ALL_OBJS_QUERY,
        variables: { where: variables, first: 200 },
    })
    return data.data.objs
}


export class ClassifiersQueryLocal implements IClassifiersSearch {
    constructor (private client: ApolloClient, private organizationId = null, private rules = []) {}

    public async init (): Promise<void> {
        this.rules = await loadClassifierRules(this.client, { organization_is_null: true })
    }

    fetchRules: (query: ITicketClassifierRuleWhereInput) => Promise<ITicketClassifierRuleUIState>
    places: (rules: ITicketClassifierRuleUIState) => Options[]
    categories: (rules: ITicketClassifierRuleUIState) => Options[]
    descriptions: (rules: ITicketClassifierRuleUIState) => Options[]
}


export class ClassifiersQueryRemote implements IClassifiersSearch {
    constructor (private client: ApolloClient) {}
    init: () => Promise<void>
    fetchRules: (query: ITicketClassifierRuleWhereInput) => Promise<ITicketClassifierRuleUIState>
    places: (rules: ITicketClassifierRuleUIState) => Options[]
    categories: (rules: ITicketClassifierRuleUIState) => Options[]
    descriptions: (rules: ITicketClassifierRuleUIState) => Options[]

}
