/**
 * Generated by `createschema ticket.TicketChange 'ticket:Relationship:Ticket:CASCADE;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/ticket/access/TicketChange')


const TicketChange = new GQLListSchema('TicketChange', {
    schemaDoc: 'Incremental changes of Ticket',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        ticket: {
            schemaDoc: 'Related ticket, whose change is logged in this entity',
            type: Relationship,
            ref: 'Ticket',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTicketChanges,
        create: access.canManageTicketChanges,
        update: access.canManageTicketChanges,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketChange,
}
