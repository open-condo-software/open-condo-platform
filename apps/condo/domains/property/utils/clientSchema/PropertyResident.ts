/**
 * Generated by `createschema property.PropertyResident 'organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; contact?:Relationship:Contact:SET_NULL; unitName:Text; name:Text; email:Text; phone:Text;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { PropertyResident as PropertyResidentGQL } from '@condo/domains/property/gql'
import { PropertyResident, PropertyResidentUpdateInput, QueryAllPropertyResidentsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'organization', 'property', 'contact', 'unitName', 'name', 'email', 'phone']
const RELATIONS = ['organization', 'property', 'contact']

export interface IPropertyResidentUIState extends PropertyResident {
    id: string
    // TODO(codegen): write IPropertyResidentUIState or extends it from
}

function convertToUIState (item: PropertyResident): IPropertyResidentUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IPropertyResidentUIState
}

export interface IPropertyResidentFormState {
    id?: undefined
    // TODO(codegen): write IPropertyResidentUIFormState or extends it from
}

function convertToUIFormState (state: IPropertyResidentUIState): IPropertyResidentFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IPropertyResidentFormState
}

function convertToGQLInput (state: IPropertyResidentFormState): PropertyResidentUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<PropertyResident, PropertyResidentUpdateInput, IPropertyResidentFormState, IPropertyResidentUIState, QueryAllPropertyResidentsArgs>(PropertyResidentGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
