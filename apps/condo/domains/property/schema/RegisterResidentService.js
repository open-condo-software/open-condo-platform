/**
 * Generated by `createservice property.RegisterResidentService --type mutations`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/property/access/RegisterResidentService')
const { Resident } = require('../utils/serverSchema/index')


const RegisterResidentService = new GQLCustomSchema('RegisterResidentService', {
    types: [
        {
            access: true,
            type: 'input RegisterResidentInput { dv: Int!, sender: JSON!, address: String!, addressMeta: JSON!, unitName: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canRegisterResident,
            schema: 'registerResident(data: RegisterResidentInput!): Resident',
            resolver: async (parent, args, context, info, extra = {}) => {
                if (!context.authedItem.id) throw new Error('[error] User is not authenticated')
                const { data: { dv, sender, address, addressMeta, unitName } } = args
                const resident = await Resident.create(context, {
                    dv,
                    sender,
                    address,
                    addressMeta,
                    unitName,
                    user: { connect: { id: context.authedItem.id } },
                })
                return resident
            },
        },
    ],
    
})

module.exports = {
    RegisterResidentService: RegisterResidentService,
}
