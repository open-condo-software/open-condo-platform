/**
 * Generated by `createschema property.PropertyResident 'organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; unitName:Text; name:Text; email:Text; phone:Text;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const { ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')
const access = require('@condo/domains/property/access/PropertyResident')
const { PropertyResident: PropertyResidentAPI } = require('../utils/serverSchema')


const PropertyResident = new GQLListSchema('PropertyResident', {
    schemaDoc: 'Person, that resides in a specified property and unit',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        organization: ORGANIZATION_OWNED_FIELD,

        property: {
            schemaDoc: 'Property, in which this person resides',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        unitName: {
            schemaDoc: 'Unit of the property, in which this person resides',
            type: Text,
            isRequired: true,
        },

        name: {
            schemaDoc: 'Full name of resident person',
            type: Text,
            isRequired: true,
        },

        email: {
            schemaDoc: 'Contact email of resident person, can be specific to related property unit',
            type: Text,
            isRequired: true,
        },

        phone: {
            schemaDoc: 'Contact phone of resident person, can be specific to related property unit',
            type: Text,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    hooks: {
        validateInput: async ({ resolvedData, operation, existingItem, addValidationError, context }) => {
            const { property, unitName, phone } = resolvedData
            const [resident] = await PropertyResidentAPI.getAll(context, {
                property: { id: property },
                unitName,
                phone,
            })
            if (operation === 'create') {
                if (resident) {
                    return addValidationError('Cannot create resident, because another resident with the same provided set of "property", "unitName", "phone"')
                }
            } else if (operation === 'update') {
                if (resident && resident.id !== existingItem.id) {
                    return addValidationError('Cannot update resident, because another resident already exists with the same provided set of "property", "unitName", "phone"')
                }
            }
        },
    },
    access: {
        read: access.canReadPropertyResidents,
        create: access.canManagePropertyResidents,
        update: access.canManagePropertyResidents,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PropertyResident,
}
