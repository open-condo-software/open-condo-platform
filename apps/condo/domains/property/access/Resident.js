/**
 * Generated by `createschema property.Resident 'organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; contact:Relationship:Contact:SET_NULL; billingAccount?:Relationship:BillingAccount:SET_NULL; unitName:Text; name:Text; email:Text; phone:Text;'`
 */
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const get = require('lodash/get')
const { Resident } = require('../utils/serverSchema')

async function canReadResidents ({ authentication: { item: user } }) {
    if (!user) return false
    if (user.isAdmin) return {}
    if (user.type === 'resident') {
        return {
            user: { id: user.id },
        }
    }
    return {
        organization: { employees_some: { user: { id: user.id }, isBlocked: false } },
    }
}

async function canManageResidents ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return false
    if (user.isAdmin) return true
    if (operation === 'create') {
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])
        if (!organizationId) return false
        const canManageResidents = await checkOrganizationPermission(user.id, organizationId, 'canManageResidents')
        return canManageResidents
    } else if (operation === 'update') {
        const [resident] = await Resident.getAll(context, { id: itemId })
        if (!resident) {
            return false
        }
        const canManageResidents = await checkOrganizationPermission(user.id, resident.organization.id, 'canManageResidents')
        return canManageResidents
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadResidents,
    canManageResidents,
}
