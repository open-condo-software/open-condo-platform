/**
 * Generated by `createschema organization.Organization 'country:Select:ru,en; name:Text; description?:Text; avatar?:File; meta:Json; employees:Relationship:OrganizationEmployee:CASCADE; statusTransitions:Json; defaultEmployeeRoleStatusTransitions:Json'`
 */
const faker = require('faker')
const { makeClientWithRegisteredOrganization } = require('../../../utils/testSchema/Organization')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const { Organization, createTestOrganization, updateTestOrganization } = require('@condo/domains/organization/utils/testSchema')

describe('Organization', () => {
    // Despite just registered user can create Organization from UI, calling `Organization.create`
    // should be forbidden for it. User can create organization using UI, because it executes
    // `registerNewOrganization` GraphQL mutation, that creates all the stuff without
    // access check, using `execGqlWithoutAccess` under the hood.
    test('user: create Organization', async () => {
        const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        try {
            await createTestOrganization(userClient)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('anonymous: create Organization', async () => {
        const client = await makeClient()
        try {
            await createTestOrganization(client)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('user: read Organization — only those, it employed in', async () => {
        const admin = await makeLoggedInAdminClient()
        await createTestOrganization(admin)
        const client = await makeClientWithRegisteredOrganization()

        const objs = await Organization.getAll(client, {})
        expect(objs.length).toBe(1)
        expect(objs[0].id).toEqual(client.organization.id)
    })

    test('anonymous: read Organization', async () => {
        const client = await makeClient()

        try {
            await Organization.getAll(client)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['objs'],
            })
            expect(e.data).toEqual({ 'objs': null })
        }
    })

    // Test case, where user can update organization are in OrganizationEmployeeRole.test.js
    test('user: update Organization — cannot', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganization(admin)

        const client = await makeClient()
        const payload = {
            name: faker.company.companyName(),
        }

        try {
            await updateTestOrganization(client, objCreated.id, payload)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('anonymous: update Organization', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganization(admin)

        const client = await makeClient()
        try {
            await updateTestOrganization(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('user: delete Organization', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganization(admin)

        const client = await makeClient()
        try {
            await Organization.delete(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('anonymous: delete Organization', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganization(admin)

        const client = await makeClient()
        try {
            await Organization.delete(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })
})
