/**
 * Generated by `createschema organization.OrganizationEmployee 'organization:Relationship:Organization:CASCADE; user:Relationship:User:SET_NULL; inviteCode:Text; name:Text; email:Text; phone:Text; role:Relationship:OrganizationEmployeeRole:SET_NULL; isAccepted:Checkbox; isRejected:Checkbox' --force`
 */

const { makeClientWithNewRegisteredAndLoggedInUser } = require ('@condo/domains/user/utils/testSchema');
const { createTestOrganizationEmployeeRole } = require ('../utils/testSchema');
const { makeClientWithRegisteredOrganization } = require ('../../../utils/testSchema/Organization');
const { createTestOrganization } = require ('../utils/testSchema');
const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { OrganizationEmployee, createTestOrganizationEmployee, updateTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')

describe('OrganizationEmployee', () => {
    describe('user: create OrganizationEmployee', async () => {

        test('cannot without granted "canManageEmployees" permission', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: false
            })
            const notManagerUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, notManagerUserClient.user, role)
            const { user } = await makeClientWithNewRegisteredAndLoggedInUser()
            try {
                await createTestOrganizationEmployee(notManagerUserClient, organization, user, role)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })

        test.todo('can with granted "canManageEmployees" permission', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: true
            })
            const managerUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, managerUserClient.user, role)
            const { user } = await makeClientWithNewRegisteredAndLoggedInUser()
            // Exception will be thrown, because of `OrganizationEmployee.fields.user.access.create: userIsAdmin`
            // It's impossible to test from OrganizationEmployee perspective with such restriction on `OrganizationEmployee.user` field
            const [obj, attrs] = await createTestOrganizationEmployee(managerUserClient, organization, user, role)
            expect(obj.id).toBeDefined()
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
            expect(obj.createdBy).toEqual(expect.objectContaining({ id: managerUserClient.user.id }))
            expect(obj.updatedBy).toEqual(expect.objectContaining({ id: managerUserClient.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
    })

    })

    test('anonymous: create OrganizationEmployee', async () => {
        const client = await makeClient()
        try {
            await createTestOrganizationEmployee(client)  // TODO(codegen): check the 'anonymous: create OrganizationEmployee' test!
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('user: read OrganizationEmployee', async () => {
        const admin = await makeLoggedInAdminClient()
        const [obj, attrs] = await createTestOrganizationEmployee(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        const objs = await OrganizationEmployee.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

        // TODO(codegen): check 'user: read OrganizationEmployee' test!
        expect(objs).toHaveLength(1)
        // expect(objs.length >= 1).toBeTruthy()
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].newId).toEqual(null)
        expect(objs[0].deletedAt).toEqual(null)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
    })

    test('anonymous: read OrganizationEmployee', async () => {
        const client = await makeClient()

        try {
            await OrganizationEmployee.getAll(client)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['objs'],
            })
            expect(e.data).toEqual({ 'objs': null })
        }
    })

    test('user: update OrganizationEmployee', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganizationEmployee(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        const payload = {}  // TODO(codegen): change the 'user: update OrganizationEmployee' payload
        const [objUpdated, attrs] = await updateTestOrganizationEmployee(client, objCreated.id, payload)

        // TODO(codegen): white checks for 'user: update OrganizationEmployee' test
        expect(objUpdated.id).toEqual(objCreated.id)
        expect(objUpdated.dv).toEqual(1)
        expect(objUpdated.sender).toEqual(attrs.sender)
        expect(objUpdated.v).toEqual(2)
        expect(objUpdated.newId).toEqual(null)
        expect(objUpdated.deletedAt).toEqual(null)
        expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.createdAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
    })

    test('anonymous: update OrganizationEmployee', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganizationEmployee(admin)  // TODO(codegen): check create function!

        const client = await makeClient()
        const payload = {}  // TODO(codegen): change the 'anonymous: update OrganizationEmployee' payload
        try {
            await updateTestOrganizationEmployee(client, objCreated.id, payload)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('user: delete OrganizationEmployee', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganizationEmployee(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        try {
            // TODO(codegen): check 'user: delete OrganizationEmployee' test!
            await OrganizationEmployee.delete(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('anonymous: delete OrganizationEmployee', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestOrganizationEmployee(admin)  // TODO(codegen): check create function!

        const client = await makeClient()
        try {
            // TODO(codegen): check 'anonymous: delete OrganizationEmployee' test!
            await OrganizationEmployee.delete(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })
})
