/**
 * Generated by `createschema organization.OrganizationEmployee 'organization:Relationship:Organization:CASCADE; user:Relationship:User:SET_NULL; inviteCode:Text; name:Text; email:Text; phone:Text; role:Relationship:OrganizationEmployeeRole:SET_NULL; isAccepted:Checkbox; isRejected:Checkbox' --force`
 */
const faker = require('faker')
const { createTestOrganizationEmployeeFullChain } = require('../utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { createTestOrganizationEmployeeRole } = require('../utils/testSchema')
const { createTestOrganization } = require('../utils/testSchema')
const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { OrganizationEmployee, createTestOrganizationEmployee, updateTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')

describe('OrganizationEmployee', () => {
    describe('user: create OrganizationEmployee', async () => {

        test('cannot without granted "canManageEmployees" permission', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: false,
            })
            const notManagerUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, notManagerUserClient.user, role)
            const { user } = await makeClientWithNewRegisteredAndLoggedInUser()
            try {
                await createTestOrganizationEmployee(notManagerUserClient, organization, user, role)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })

        test.skip('can with granted "canManageEmployees" permission', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: true,
            })
            const managerUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, managerUserClient.user, role)
            const { user } = await makeClientWithNewRegisteredAndLoggedInUser()
            // Exception will be thrown, because of `OrganizationEmployee.fields.user.access.create: userIsAdmin`
            // It's impossible to test from OrganizationEmployee perspective with such restriction on `OrganizationEmployee.user` field
            const [obj, attrs] = await createTestOrganizationEmployee(managerUserClient, organization, user, role)
            expect(obj.id).toBeDefined()
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.createdBy).toEqual(expect.objectContaining({ id: managerUserClient.user.id }))
            expect(obj.updatedBy).toEqual(expect.objectContaining({ id: managerUserClient.user.id }))
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
        })

    })

    test('anonymous: create OrganizationEmployee', async () => {
        const anonymous = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const [organization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageEmployees: false,
        })
        const { user } = await makeClientWithNewRegisteredAndLoggedInUser()
        try {
            await createTestOrganizationEmployee(anonymous, organization, user, role)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('user: read OrganizationEmployee', async () => {
        const admin = await makeLoggedInAdminClient()
        const [organization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageEmployees: false,
        })
        const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        const [obj, attrs] = await createTestOrganizationEmployee(admin, organization, userClient.user, role)

        const objs = await OrganizationEmployee.getAll(userClient, {}, { sortBy: ['updatedAt_DESC'] })

        expect(objs.length).toBeGreaterThan(0)
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
    })

    test('anonymous: read OrganizationEmployee', async () => {
        const client = await makeClient()

        try {
            await OrganizationEmployee.getAll(client)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['objs'],
            })
            expect(e.data).toEqual({ 'objs': null })
        }
    })

    describe('user: update OrganizationEmployee', async () => {

        test('cannot without granted "canManageEmployees" permission', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: false,
            })
            const notManagerUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, notManagerUserClient.user, role)
            const { user } = await makeClientWithNewRegisteredAndLoggedInUser()
            const [objCreated] = await createTestOrganizationEmployee(admin, organization, user, role)
            try {
                await updateTestOrganizationEmployee(notManagerUserClient, objCreated.id)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })

        test('can with granted "canManageEmployees" permission', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: true,
            })
            const managerClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, managerClient.user, role)
            const { user } = await makeClientWithNewRegisteredAndLoggedInUser()
            const [objCreated] = await createTestOrganizationEmployee(admin, organization, user, role)

            const payload = {
                name: faker.name.firstName(),
            }
            const [obj, attrs] = await updateTestOrganizationEmployee(managerClient, objCreated.id, payload)
            expect(obj.id).toBeDefined()
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(2)
            expect(obj.name).toEqual(attrs.name)
            expect(obj.updatedBy).toEqual(expect.objectContaining({ id: managerClient.user.id }))
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
        })

    })

    test('anonymous: update OrganizationEmployee', async () => {
        const [objCreated] = await createTestOrganizationEmployeeFullChain()

        const client = await makeClient()
        const payload = {}
        try {
            await updateTestOrganizationEmployee(client, objCreated.id, payload)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    describe('user: delete OrganizationEmployee', async () => {

        test('cannot without granted "canManageEmployees" permission', async () => {
            const [objCreated, , { admin, organization }] = await createTestOrganizationEmployeeFullChain()
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: false,
            })
            const notManagerUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, notManagerUserClient.user, role)
            try {
                await OrganizationEmployee.delete(notManagerUserClient, objCreated.id)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })

        test('can with granted "canManageEmployees" permission', async () => {
            const [objCreated, , { admin, organization }] = await createTestOrganizationEmployeeFullChain()
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageEmployees: true,
            })
            const managerClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, managerClient.user, role)

            const obj = await OrganizationEmployee.delete(managerClient, objCreated.id)
            expect(obj.id).toBeDefined()

            const objs = await OrganizationEmployee.getAll(admin, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })
            expect(objs.length).toBe(0)
        })

    })

    test('anonymous: delete OrganizationEmployee', async () => {
        const [objCreated] = await createTestOrganizationEmployeeFullChain()

        const client = await makeClient()
        try {
            await OrganizationEmployee.delete(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })
})
